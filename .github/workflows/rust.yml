name: Rust

on:
  push:
    branches: [ master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master ]

defaults:
  run:
    working-directory: control

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: control

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose
      
  release:
    name: Build Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    strategy:
      matrix:
        target:
          - x86_64-linux-gnu   # amd64
          - aarch64-linux-gnu  # arm64
    steps:
      - uses: actions/checkout@v2
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      
      - name: Install cross-compilation tools
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
      
      - name: Build binary
        run: |
          cargo build --release --target ${{ matrix.target }}
          
      - name: Prepare binary
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/$BINARY_NAME release/$BINARY_NAME-${{ matrix.target }}
          cd release && tar -czf $BINARY_NAME-${{ matrix.target }}.tar.gz $BINARY_NAME-${{ matrix.target }}
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.target }}
          path: control/release/${{ env.BINARY_NAME }}-${{ matrix.target }}.tar.gz
          
  upload-release:
    name: Upload GitHub Release
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v2
        
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: |
            */*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
